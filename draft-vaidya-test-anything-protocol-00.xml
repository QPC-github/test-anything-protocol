<?xml version="1.0" encoding="UTF-8"?>
<!-- Based on http://xml.resource.org/authoring/sample.xml -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
    <!ENTITY rfc2119 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
    <!ENTITY rfc5234 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml'>
]>

<rfc
    category="info" 
    ipr="full3978"
    docName="draft-vaidya-test-anything-protocol-00"
>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>

    <front>
        <title>The Test Anything Protocol (TAP)</title>
        <author initials='G.G.' surname="Vaidya" fullname='Gaurav Vaidya' role="editor">
            <organization/>
        </author>
        <author initials='M.G.' surname="Schwern" fullname='Michael G Schwern'>
            <organization/>
        </author>
        
        <date/>
        <abstract>
            <t>
            The Test Anything Protocol (TAP) is a protocol to allow communication 
            between unit tests and a test harness. It allows individual tests (TAP 
            producers) to communicate test results to the testing harness in a 
            language-agnostic way. Tests can indicate success, failure, as well 
            as mark tests as unimplemented or skipped, and to provide additional 
            information to aid in debugging of failed tests. Unlike other testing 
            systems, it can indicate missing tests and duplicated tests. 
            </t>

            <t>
            This specification defines TAP version 13.
            </t>
        </abstract>
    </front>

    <middle>
        <section title="Introduction">
            <t>
            The Test Anything Protocol (TAP) describes a standard format for testing
            suites to use. This format provides both human and machine-readable 
            information on which tests were run, whether they were successful or 
            failed, as well as other information which might be useful in tracing 
            the cause of the failure. Being machine-readable allows this information 
            to be easily parsed by an automated testing harness. Test results may 
            then be summarized and analyzed. Being human-readable allows the results 
            of a testing system to be read manually; this is useful for quickly 
            determining whether individual tests pass and to aid in debugging the 
            test system itself. 
            </t>

            <t>
            TAP has been used by the Perl interpreter's test suite since 1987.
            </t>

            <section title="Requirements notation">
                <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
                "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
                and "OPTIONAL" in this document are to be interpreted as
                described in <xref target="RFC2119"/>.</t>

                <t>
                The grammatical rules in this document are following ABNF and are to be 
                interpreted as described in <xref target="RFC5234"/>.
                </t>
            </section>
        </section>

        <section title="Definitions">
            <t>
            <list style="hanging" hangIndent="6">
                <t hangText="Test:">
		<vspace/>
                A piece of software which determines if a particular facility or 
                component is functional. 
                </t>

                <t hangText="Test result:">
		<vspace/>
                The encoding in TAP of the result of a single test. It may have 
                exactly one TAP result directive. 
                </t>

                <t hangText="Test set:">
		<vspace/>
                Zero or more test results with exactly one plan. A test set can 
                be determined to have failed or passed. 
                </t>

                <t hangText="Test suite:">
		<vspace/>
                A collection of test sets. 
                </t>

                <t hangText="TAP document:">
		<vspace/>
                One test set which parses correctly as defined in this document. 
                Future expansion may allow multiple test sets to be contained 
                in a single TAP document, allowing an entire test suite to be 
                stored as a single TAP document. 
                </t>

                <t hangText="Plan:">
		<vspace/>
                The number of tests which are expected to pass in a single test set. 
                </t>

                <t hangText="Directive:">
		<vspace/>
                A directive changes the meaning of a test result; it is commonly used 
                to indicate that a failing test should be reported as passing (TODO) 
                or that a passing test should be tagged as suspicious (SKIP). 
                </t>

                <t hangText="Reason:">
		<vspace/>
                A reason explains why a directive was necessary. 
                </t>

                <t hangText="Description:">
		<vspace/>
                A description says what a test result is testing. 
                </t>

                <t hangText="Producer:">
		<vspace/>
                A producer is a thing which can generate a valid TAP document. 
                </t>

                <t hangText="Consumer:">
		<vspace/>
                A consumer is a thing which can parse and interpret a TAP document. 
                </t>

                <t hangText="Filter:">
		<vspace/>
                A filter a piece of software which consumes a TAP document, and 
                produces a new TAP document based in some way on the TAP input. 
                For example, it can reproduce the TAP document exactly, normalize 
                the formatting, combine multiple documents, or summarize the 
                result of tests as a new TAP document.
                </t>
            </list> 
            </t>
        </section>

        <section title="Producers and consumers">
            <t>
            A TAP document might exist as a file, data stream, encoded in another medium (stored in a PDF file, for instance) or in any other form which can be parsed as described below. For maximum compatibility, it may be produced by any TAP producer, and must then be consumable by any TAP consumer. 
            </t>

            <t>
            One example system of producers and consumers is the Test::More/Test::Harness system in Perl testing. In this system, test producers are executable Perl scripts with a '.t' extension, collected in a number of folders, which themselves use the Test::More library to simplify testing. These scripts can be executed individually, and emit TAP documents on standard output. 
            </t>

            <t>
            A TAP consumer, such as the Perl module TAP::Parser, can interpret the output of a TAP producer to determine how many tests were run, which tests succeeded, and which diagnostic information might be usefully reported to the user. 
            </t>

            <t>
            Note that these two processes are often decoupled. The TAP document emitted by the TAP producer can be stored before being interpreted by the TAP parser; this allows all diagnostic and testing information to be stored for later analysis and usage. The TAP document might be generated on one server, then downloaded to another before being processed. A single TAP parser can be used to process files in all these cases, illustrating TAP's utility as a cross-language, cross-environment tool. 
            </t>

            <t>
            The complete flow in this system can look something like this:
            </t>

            <figure>
<artwork><![CDATA[
 ------------
 | Producer |
 ------------
     |
     V
 ----------------        -----------           --------------------
 | TAP document | --+--> | Storage |      +--> | Formatted Output |
 ----------------   |    -----------      |    --------------------
                    |         |           |
                    |         V           |
                    |    --------------   |    --------------------
                    +--> | TAP parser |---+--> | Test summaries   |
                         --------------        --------------------
]]></artwork>
            </figure>

            <t>
            Additionally, utilities like "prove" can further simplify running a suite of TAP producers, by searching for files having certain characteristics or matching particular patterns. For instance, conventionally, all tests for a Perl module are stored in the 't/' folder, and consist of executable scripts (TAP producers) with extensions of 't'. The "prove" utility, part of the Test::Harness module, can then be used to find these files and run them all. In the following example, prove executes t/error.t, t/id.t and t/url.t and evaluates the produced TAP documents in turn, checking which ones passed and failed, and providing a complete summary of the entire test suite run.
            </t>

            <figure><artwork><![CDATA[
$ prove t/*.t
t/error.t...ok
t/id.t......ok
t/url.t.....ok
Result: PASS
]]></artwork></figure>
        </section>

        <section title="Security Considerations">
        <t>TBD</t>
        </section>
    </middle>

    <back>
        <references title='Normative References'>
            &rfc2119;
            &rfc5234;
        </references>
    </back>

</rfc>
